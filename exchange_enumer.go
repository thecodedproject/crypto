// Code generated by "enumer -type=Exchange -trimprefix=Exchange -json"; DO NOT EDIT.

//
package crypto

import (
	"encoding/json"
	"fmt"
)

const _ExchangeName = "UnknownLunoBinanceSentinal"

var _ExchangeIndex = [...]uint8{0, 7, 11, 18, 26}

func (i Exchange) String() string {
	if i < 0 || i >= Exchange(len(_ExchangeIndex)-1) {
		return fmt.Sprintf("Exchange(%d)", i)
	}
	return _ExchangeName[_ExchangeIndex[i]:_ExchangeIndex[i+1]]
}

var _ExchangeValues = []Exchange{0, 1, 2, 3}

var _ExchangeNameToValueMap = map[string]Exchange{
	_ExchangeName[0:7]:   0,
	_ExchangeName[7:11]:  1,
	_ExchangeName[11:18]: 2,
	_ExchangeName[18:26]: 3,
}

// ExchangeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeString(s string) (Exchange, error) {
	if val, ok := _ExchangeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Exchange values", s)
}

// ExchangeValues returns all values of the enum
func ExchangeValues() []Exchange {
	return _ExchangeValues
}

// IsAExchange returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Exchange) IsAExchange() bool {
	for _, v := range _ExchangeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Exchange
func (i Exchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Exchange
func (i *Exchange) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Exchange should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeString(s)
	return err
}
