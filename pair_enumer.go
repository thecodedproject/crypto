// Code generated by "enumer -type=Pair -trimprefix=Pair -json -text -transform=snake"; DO NOT EDIT.

//
package crypto

import (
	"encoding/json"
	"fmt"
)

const _PairName = "unknownbtceurbtcgbpbtcusdtltcbtcsentinal"

var _PairIndex = [...]uint8{0, 7, 13, 19, 26, 32, 40}

func (i Pair) String() string {
	if i < 0 || i >= Pair(len(_PairIndex)-1) {
		return fmt.Sprintf("Pair(%d)", i)
	}
	return _PairName[_PairIndex[i]:_PairIndex[i+1]]
}

var _PairValues = []Pair{0, 1, 2, 3, 4, 5}

var _PairNameToValueMap = map[string]Pair{
	_PairName[0:7]:   0,
	_PairName[7:13]:  1,
	_PairName[13:19]: 2,
	_PairName[19:26]: 3,
	_PairName[26:32]: 4,
	_PairName[32:40]: 5,
}

// PairString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PairString(s string) (Pair, error) {
	if val, ok := _PairNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pair values", s)
}

// PairValues returns all values of the enum
func PairValues() []Pair {
	return _PairValues
}

// IsAPair returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pair) IsAPair() bool {
	for _, v := range _PairValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Pair
func (i Pair) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Pair
func (i *Pair) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Pair should be a string, got %s", data)
	}

	var err error
	*i, err = PairString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Pair
func (i Pair) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Pair
func (i *Pair) UnmarshalText(text []byte) error {
	var err error
	*i, err = PairString(string(text))
	return err
}
