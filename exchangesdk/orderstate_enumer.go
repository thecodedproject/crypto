// Code generated by "enumer -type=OrderState -trimprefix=OrderState -json -text -transform=snake"; DO NOT EDIT.

//
package exchangesdk

import (
	"encoding/json"
	"fmt"
)

const _OrderStateName = "unknownawaiting_triggerin_order_bookfilledcancelledsentinal"

var _OrderStateIndex = [...]uint8{0, 7, 23, 36, 42, 51, 59}

func (i OrderState) String() string {
	if i < 0 || i >= OrderState(len(_OrderStateIndex)-1) {
		return fmt.Sprintf("OrderState(%d)", i)
	}
	return _OrderStateName[_OrderStateIndex[i]:_OrderStateIndex[i+1]]
}

var _OrderStateValues = []OrderState{0, 1, 2, 3, 4, 5}

var _OrderStateNameToValueMap = map[string]OrderState{
	_OrderStateName[0:7]:   0,
	_OrderStateName[7:23]:  1,
	_OrderStateName[23:36]: 2,
	_OrderStateName[36:42]: 3,
	_OrderStateName[42:51]: 4,
	_OrderStateName[51:59]: 5,
}

// OrderStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderStateString(s string) (OrderState, error) {
	if val, ok := _OrderStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderState values", s)
}

// OrderStateValues returns all values of the enum
func OrderStateValues() []OrderState {
	return _OrderStateValues
}

// IsAOrderState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderState) IsAOrderState() bool {
	for _, v := range _OrderStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OrderState
func (i OrderState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrderState
func (i *OrderState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderState should be a string, got %s", data)
	}

	var err error
	*i, err = OrderStateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for OrderState
func (i OrderState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OrderState
func (i *OrderState) UnmarshalText(text []byte) error {
	var err error
	*i, err = OrderStateString(string(text))
	return err
}
