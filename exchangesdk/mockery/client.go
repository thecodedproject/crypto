// Code generated by github.com/Rellum/mockery v1.1.1. DO NOT EDIT.

package mockery

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	crypto "github.com/thecodedproject/crypto"

	exchangesdk "github.com/thecodedproject/crypto/exchangesdk"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// TSetup will assert the mock expectations once the test completes.
func (_m *Client) TSetup(t mock.TestingT, expectedCalls ...*mock.Call) *Client {
	_m.ExpectedCalls = append(_m.ExpectedCalls, expectedCalls...)
	if t, ok := t.(interface {
		mock.TestingT
		Cleanup(func())
	}); ok {
		t.Cleanup(func() { _m.AssertExpectations(t) })
	}
	return _m
}

// BasePrecision provides a mock function with given fields:
func (_m *Client) BasePrecision() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, orderId
func (_m *Client) CancelOrder(ctx context.Context, orderId string) error {
	ret := _m.Called(ctx, orderId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CounterPrecision provides a mock function with given fields:
func (_m *Client) CounterPrecision() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Exchange provides a mock function with given fields:
func (_m *Client) Exchange() crypto.Exchange {
	ret := _m.Called()

	var r0 crypto.Exchange
	if rf, ok := ret.Get(0).(func() crypto.Exchange); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(crypto.Exchange)
	}

	return r0
}

// GetOrderStatus provides a mock function with given fields: ctx, orderId
func (_m *Client) GetOrderStatus(ctx context.Context, orderId string) (exchangesdk.OrderStatus, error) {
	ret := _m.Called(ctx, orderId)

	var r0 exchangesdk.OrderStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) exchangesdk.OrderStatus); ok {
		r0 = rf(ctx, orderId)
	} else {
		r0 = ret.Get(0).(exchangesdk.OrderStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrades provides a mock function with given fields: ctx, page
func (_m *Client) GetTrades(ctx context.Context, page int64) ([]exchangesdk.Trade, error) {
	ret := _m.Called(ctx, page)

	var r0 []exchangesdk.Trade
	if rf, ok := ret.Get(0).(func(context.Context, int64) []exchangesdk.Trade); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exchangesdk.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestPrice provides a mock function with given fields: ctx
func (_m *Client) LatestPrice(ctx context.Context) (decimal.Decimal, error) {
	ret := _m.Called(ctx)

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func(context.Context) decimal.Decimal); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakerFee provides a mock function with given fields:
func (_m *Client) MakerFee() decimal.Decimal {
	ret := _m.Called()

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func() decimal.Decimal); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	return r0
}

// PostLimitOrder provides a mock function with given fields: ctx, order
func (_m *Client) PostLimitOrder(ctx context.Context, order exchangesdk.Order) (string, error) {
	ret := _m.Called(ctx, order)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, exchangesdk.Order) string); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, exchangesdk.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStopLimitOrder provides a mock function with given fields: ctx, o
func (_m *Client) PostStopLimitOrder(ctx context.Context, o exchangesdk.StopLimitOrder) (string, error) {
	ret := _m.Called(ctx, o)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, exchangesdk.StopLimitOrder) string); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, exchangesdk.StopLimitOrder) error); ok {
		r1 = rf(ctx, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakerFee provides a mock function with given fields:
func (_m *Client) TakerFee() decimal.Decimal {
	ret := _m.Called()

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func() decimal.Decimal); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	return r0
}
