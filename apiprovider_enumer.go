// Code generated by "enumer -type=ApiProvider -trimprefix=ApiProvider -json -text -transform=snake"; DO NOT EDIT.

//
package crypto

import (
	"encoding/json"
	"fmt"
)

const _ApiProviderName = "unknowndummy_exchangelunobinancesentinal"

var _ApiProviderIndex = [...]uint8{0, 7, 21, 25, 32, 40}

func (i ApiProvider) String() string {
	if i < 0 || i >= ApiProvider(len(_ApiProviderIndex)-1) {
		return fmt.Sprintf("ApiProvider(%d)", i)
	}
	return _ApiProviderName[_ApiProviderIndex[i]:_ApiProviderIndex[i+1]]
}

var _ApiProviderValues = []ApiProvider{0, 1, 2, 3, 4}

var _ApiProviderNameToValueMap = map[string]ApiProvider{
	_ApiProviderName[0:7]:   0,
	_ApiProviderName[7:21]:  1,
	_ApiProviderName[21:25]: 2,
	_ApiProviderName[25:32]: 3,
	_ApiProviderName[32:40]: 4,
}

// ApiProviderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ApiProviderString(s string) (ApiProvider, error) {
	if val, ok := _ApiProviderNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ApiProvider values", s)
}

// ApiProviderValues returns all values of the enum
func ApiProviderValues() []ApiProvider {
	return _ApiProviderValues
}

// IsAApiProvider returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ApiProvider) IsAApiProvider() bool {
	for _, v := range _ApiProviderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ApiProvider
func (i ApiProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ApiProvider
func (i *ApiProvider) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ApiProvider should be a string, got %s", data)
	}

	var err error
	*i, err = ApiProviderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ApiProvider
func (i ApiProvider) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ApiProvider
func (i *ApiProvider) UnmarshalText(text []byte) error {
	var err error
	*i, err = ApiProviderString(string(text))
	return err
}
